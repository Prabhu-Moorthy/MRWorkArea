package distributedCache;

import java.net.URI;

import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.filecache.DistributedCache;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

public class MyDriver extends Configured implements Tool {

	@Override
	public int run(String[] args) throws Exception {
		Job job = Job.getInstance();
		job.setJarByClass(MyDriver.class);

		Path outputPath =  new Path(args[1]);
		outputPath.getFileSystem(getConf()).delete(outputPath, true);
		
		job.setMapperClass(MyMapper.class);
		job.setReducerClass(MyReducer.class);
		
		job.setInputFormatClass(TextInputFormat.class);
		job.setOutputFormatClass(TextOutputFormat.class);
		
		//DistributedCache.addCacheFile(new URI("/user/v774137/MR/Inputs/Special/stopwords.txt"),job.getConfiguration());
		
		TextInputFormat.addInputPath(job, new Path(args[0]));
		TextOutputFormat.setOutputPath(job, outputPath);
		
		//job.setNumReduceTasks(5);
		
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(Text.class);
		return job.waitForCompletion(true) ? 0 : 1;
		
	}

	public static void main(String[] args) throws Exception {
		ToolRunner.run(new MyDriver(), args);
	}

}
----------------------------------------------------
package distributedCache;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.net.URI;
import java.util.HashSet;
import java.util.Set;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.filecache.DistributedCache;
import org.apache.hadoop.mapreduce.lib.input.FileSplit;

public class MyMapper extends Mapper<LongWritable, Text, Text, Text> {
	enum customCounters{
		POSITIVE
	}
	Set<String> stopWords = new HashSet<String>();
	@Override
	protected void setup(Context context)
			throws IOException, InterruptedException {
		String stopline = "";
		BufferedReader fis;
		String records = "";
		
		Path[] cacheFiles = DistributedCache.getLocalCacheFiles(context.getConfiguration());
		String chunk = null;
		if(cacheFiles[0].toString().contains("stopwords")){
			fis = new BufferedReader(new FileReader(cacheFiles[0].toString()));
			while((chunk = fis.readLine()) != null){
				stopWords.add(chunk);
			}
		}
	}

	@Override
	protected void map(LongWritable key, Text value,Context context)
			throws IOException, InterruptedException {
		FileSplit split = (FileSplit)context.getInputSplit();
		String fileName = split.getPath().getName();
		String[] line = value.toString().split("\\s");

		for(String val:line){
			if(!stopWords.contains(val)){
				context.write(new Text(val), new Text(fileName));
			}
		}
	}
}

---------------------------------------------------------
package distributedCache;

import java.io.IOException;
import java.util.Set;
import java.util.TreeSet;

import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Reducer;

public class MyReducer extends Reducer<Text, Text, Text, Text> {
	@Override
	protected void reduce(Text key, Iterable<Text> values,Context context)
			throws IOException, InterruptedException {
		Set<Text> optSet = new TreeSet<>();
		for(Text value:values){
			Text newVal = new Text(value);
			optSet.add(newVal);
		}
		context.write(key, new Text(optSet.toString()));
	}
}
