package customInputFormat;

import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

public class CustomDriver extends Configured implements Tool {

	//http://hadooptutorial.info/creating-custom-hadoop-writable-data-type/
	@Override
	public int run(String[] args) throws Exception {
		Job job = Job.getInstance();
		job.setJarByClass(CustomDriver.class);
		
		Path outputPath =  new Path(args[1]);
		outputPath.getFileSystem(getConf()).delete(outputPath, true);
		
		job.setMapperClass(CustomMapper.class);
		job.setReducerClass(CustomReducer.class);
		
		job.setInputFormatClass(TextInputFormat.class);
		job.setOutputFormatClass(TextOutputFormat.class);
		
		TextInputFormat.addInputPath(job, new Path(args[0]));
		TextOutputFormat.setOutputPath(job, outputPath);
		
		job.setNumReduceTasks(5);
		
		job.setMapOutputKeyClass(WebLogWritable.class);
		job.setMapOutputValueClass(IntWritable.class);
		
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(IntWritable.class);
		return job.waitForCompletion(true) ? 0 : 1;
		
	}

	public static void main(String[] args) throws Exception {
		ToolRunner.run(new CustomDriver(), args);
	}

}
----------------------------------------------------
package customInputFormat;

import java.io.IOException;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;

public class CustomMapper extends Mapper<LongWritable, Text, WebLogWritable, IntWritable> {

	WebLogWritable wLog = new WebLogWritable();
	private static final IntWritable one = new IntWritable(1);
	private IntWritable reqno = new IntWritable();
	private Text url = new Text();
	private Text rdate = new Text();
	private Text rtime = new Text();
	private Text rip = new Text();

	protected void map(LongWritable key, Text value,Context context)
			throws IOException, InterruptedException {
		
		String[] words = value.toString().split("\t") ;
		 
	    reqno.set(Integer.parseInt(words[0]));
	    url.set(words[1]);
	    rdate.set(words[2]);
	    rtime.set(words[3]);
	    rip.set(words[4]);
	 
	    wLog.set(reqno, url, rdate, rtime, rip);
	 
	    context.write(wLog, one);
	}
}

--------------------------------------------
package customInputFormat;

import java.io.IOException;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Reducer;

public class CustomReducer extends Reducer<WebLogWritable, IntWritable, Text, IntWritable> {
	private IntWritable result = new IntWritable();
	private Text ip = new Text();

	protected void reduce(WebLogWritable key, Iterable<IntWritable> values,Context context)
			throws IOException, InterruptedException {
		int sum = 0;
	    ip = key.getIp(); 
	    
	    for (IntWritable wLog : values) 
	    {
	      sum++ ;
	    }
	    result.set(sum);
	    context.write(ip, result);
	}
}

---------------------------------------------------
package customInputFormat;

import java.io.IOException;
import java.util.List;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.InputSplit;
import org.apache.hadoop.mapreduce.JobContext;
import org.apache.hadoop.mapreduce.RecordReader;
import org.apache.hadoop.mapreduce.TaskAttemptContext;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;


public class CustomInputFormat extends TextInputFormat{
	
@Override
	public RecordReader<LongWritable, Text> createRecordReader(
			InputSplit split, TaskAttemptContext context) {
		// TODO Auto-generated method stub
		return super.createRecordReader(split, context);
	}
@Override
	public List<InputSplit> getSplits(JobContext arg0) throws IOException {
		// TODO Auto-generated method stub
		return super.getSplits(arg0);
	}
@Override
protected boolean isSplitable(JobContext context, Path file) {
	// TODO Auto-generated method stub
	return super.isSplitable(context, file);
}
}
------------------------------------------------------------
package customInputFormat;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.Writable;
import org.apache.hadoop.io.WritableComparable;

/**
 * @author V774137
 *
 */
public class WebLogWritable implements WritableComparable<WebLogWritable> {

	private Text siteURL, reqDate, timestamp, ipaddress;
	   private IntWritable reqNo;
	 
	   //Default Constructor
	   public WebLogWritable() 
	   {
	    this.siteURL = new Text();
	    this.reqDate = new Text();
	    this.timestamp = new Text();
	    this.ipaddress = new Text();
	    this.reqNo = new IntWritable();
	   }
	 
	   //Custom Constructor
	   public WebLogWritable(IntWritable reqno, Text url, Text rdate, Text rtime, Text rip) 
	   {
	    this.siteURL = url;
	    this.reqDate = rdate;
	    this.timestamp = rtime;
	    this.ipaddress = rip;
	    this.reqNo = reqno;
	   }
	 
	   //Setter method to set the values of WebLogWritable object
	   public void set(IntWritable reqno, Text url, Text rdate, Text rtime, Text rip) 
	   {
	    this.siteURL = url;
	    this.reqDate = rdate;
	    this.timestamp = rtime;
	    this.ipaddress = rip;
	    this.reqNo = reqno;
	   }
	 
	   //to get IP address from WebLog Record
	   public Text getIp()
	   {
	    return ipaddress; 
	   }
	   
	   @Override
	   //overriding default readFields method. 
	   //It de-serializes the byte stream data
	   public void readFields(DataInput in) throws IOException 
	   {
	    ipaddress.readFields(in);
	    timestamp.readFields(in);
	    reqDate.readFields(in);
	    reqNo.readFields(in);
	    siteURL.readFields(in);
	   }
	 
	   @Override
	   //It serializes object data into byte stream data
	   public void write(DataOutput out) throws IOException 
	   {
	    ipaddress.write(out);
	    timestamp.write(out);
	    reqDate.write(out);
	    reqNo.write(out);
	    siteURL.write(out);
	   }
	   
	   @Override
	   public int compareTo(WebLogWritable o) 
	   {
	     if (ipaddress.compareTo(o.ipaddress)==0)
	     {
	       return (timestamp.compareTo(o.timestamp));
	     }
	     else return (ipaddress.compareTo(o.ipaddress));
	   }
	 
	   @Override
	   public boolean equals(Object o) 
	   {
	     if (o instanceof WebLogWritable) 
	     {
	       WebLogWritable other = (WebLogWritable) o;
	       return ipaddress.equals(other.ipaddress) && timestamp.equals(other.timestamp);
	     }
	     return false;
	   }
	 
	   @Override
	   public int hashCode()
	   {
	     return ipaddress.hashCode();
	   }


}
